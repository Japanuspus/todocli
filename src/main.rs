use serde::{Serialize, Deserialize};
use reqwest;

mod config; //from config.rs generated by build.rs
use config::CONFIG;

#[derive(Serialize, Deserialize, Default, Debug)]
struct Tokens {
    access_token: String,
    refresh_token: String,
}

#[derive(Deserialize, Debug)]
struct HttpBin {
    origin: String,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut tokens: Tokens = confy::load(&CONFIG.app_name).expect("Failed to load tokens");
    println!("Hello, world from {} with token: {}", CONFIG.tenant_id, tokens.access_token);

    tokens.access_token = format!("{}{}", tokens.access_token, "x");
    confy::store(&CONFIG.app_name, &tokens).expect("Failed to store tokens");

    let resp = reqwest::blocking::get("https://httpbin.org/ip")?
        .json::<HttpBin>()?;
    println!("{:#?}", resp);
    Ok(())
}
