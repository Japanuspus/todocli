use serde::{Serialize, Deserialize};
use reqwest;
use reqwest::blocking::{Client};

mod config; //from config.rs generated by build.rs
use config::CONFIG;

type Result<T> = std::result::Result<T, Box<dyn std::error::Error>>;

#[derive(Serialize, Deserialize, Default, Debug)]
struct Tokens {
    access_token: String,
    refresh_token: String,
}

#[derive(Deserialize, Debug)]
struct DeviceAuthorizationResponse {
    device_code: String,
    user_code: String,
    verification_uri: String,
    expires_in: u64,
    interval: u64,
    message: String,
}

fn request_device_authorization(client: &mut Client) -> Result<DeviceAuthorizationResponse> {
    let params = [
        ("client_id",  CONFIG.client_id),
        ("scope", CONFIG.scope)
    ];

    let res = client.post("https://login.microsoftonline.com/common/oauth2/v2.0/devicecode")
        .form(&params)
        .send()?
        .json::<DeviceAuthorizationResponse>()?;
    Ok(res)
}

fn main() -> Result<()> {
    let mut tokens: Tokens = confy::load(&CONFIG.app_name).expect("Failed to load tokens");
    println!("Hello, world from {} with token: {}", CONFIG.tenant_id, tokens.access_token);

    tokens.access_token = format!("{}{}", tokens.access_token, "x");
    confy::store(&CONFIG.app_name, &tokens).expect("Failed to store tokens");

    let mut client = Client::new();
    let r = request_device_authorization(&mut client)?;
    println!("{:#?}", r);
    Ok(())
}
